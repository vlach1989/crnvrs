{"version":3,"sources":["constants/ActionTypes.js","state/ConfirmedCases/reducers.js","serviceWorker.js","config.js","state/ConfirmedCases/actions.js","state/Action.js","state/ConfirmedCases/selectors.js","state/Select.js","components/Confirmed/ConfirmedCasesChart/presentation.js","components/Confirmed/ConfirmedCasesChart/index.js","components/Confirmed/presentation.js","components/Confirmed/index.js","components/Card/index.js","index.js","state/Store.js"],"names":["utils","deepKeyMirror","commonActionTypesDefinitions","CONFIRMED_CASES","ADD","INITIAL_STATE","DEFAULT_INITIAL_STATE","state","action","type","ActionTypes","common","add","Boolean","window","location","hostname","match","confirmedCasesData","corsProxy","loadCsvData","dispatch","Papa","parse","config","download","header","complete","result","data","Error","finalData","map","area","country","province","Lat","Long","key","timeSerie","currentCases","_","forIn","val","dateString","date","moment","toISOString","value","Number","push","name","cases","CommonAction","specific","confirmedCases","getAll","commonSelectors","getAllSortedByCases","createSelector","allCases","orderBy","getFilteredDataByConfirmedCasesThreshold","threshold","countries","length","filteredCountries","filter","item","includes","appliedThreshold","filteredCases","index","forEach","day","CommonSelect","ConfirmedCasesChart","props","this","keySourcePath","nameSourcePath","serieDataSourcePath","xSourcePath","ySourcePath","isSerie","pointRadius","xValuesSize","xOptions","yScaleType","yValuesSize","yTitle","yOptions","min","max","unit","sorting","height","minWidth","legend","withPoints","pointOptions","radius","showOnHover","React","PureComponent","connect","ownProps","Select","presentation","thresholdOptions","label","Confirmed","selectedAreas","onAreaChange","bind","onThresholdChange","selectedOptions","keys","option","sorted","sortBy","setState","optionLabel","optionValue","options","allAreas","multi","onChange","clearable","Card","className","title","subtitle","children","Store","history","middleware","applyMiddleware","thunk","routerMiddleware","createStore","combineReducers","app","appReducers","router","connectRouter","compose","reduxBatch","createBrowserHistory","wrapHistory","primaryFocusTarget","smoothScroll","createHistory","basename","process","Action","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.866c42fd.chunk.js","sourcesContent":["import {utils} from '@gisatcz/ptr-utils'\r\nimport {commonActionTypesDefinitions} from '@gisatcz/ptr-state';\r\n\r\nexport const crnvrs = {\r\n    CONFIRMED_CASES: {\r\n        ADD: null,\r\n    }\r\n};\r\n\r\nexport default utils.deepKeyMirror({...commonActionTypesDefinitions, ...crnvrs});\r\n\r\n","import ActionTypes from '../../constants/ActionTypes';\r\nimport {DEFAULT_INITIAL_STATE, commonReducers as common} from '@gisatcz/ptr-state';\r\n\r\nconst INITIAL_STATE = {\r\n\t...DEFAULT_INITIAL_STATE\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase ActionTypes.CONFIRMED_CASES.ADD:\r\n\t\t\treturn common.add(state, action);\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const corsProxy = \"https://cors-anywhere.herokuapp.com/\";\r\n\r\nexport default {\r\n    confirmedCasesData: corsProxy + \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\"\r\n}","import moment from 'moment';\r\nimport _ from 'lodash';\r\nimport ActionTypes from '../../constants/ActionTypes';\r\nimport {commonActions as common} from '@gisatcz/ptr-state';\r\nimport Papa from 'papaparse';\r\n\r\nimport config from \"../../config\";\r\n\r\n// ============ creators ===========\r\n\r\nconst add = common.add(ActionTypes.CONFIRMED_CASES);\r\n\r\nconst loadCsvData = () => (dispatch) => {\r\n\tPapa.parse(config.confirmedCasesData, {\r\n\t\tdownload: true,\r\n\t\theader: true,\r\n\t\tcomplete: function(result) {\r\n\t\t\tif (result && result.data) {\r\n\t\t\t\tconst finalData = result.data.map(area => {\r\n\t\t\t\t\tconst country = area[\"Country/Region\"];\r\n\t\t\t\t\tconst province = area[\"Province/State\"];\r\n\t\t\t\t\tdelete area[\"Country/Region\"];\r\n\t\t\t\t\tdelete area[\"Province/State\"];\r\n\t\t\t\t\tdelete area.Lat;\r\n\t\t\t\t\tdelete area.Long;\r\n\r\n\t\t\t\t\tlet key = country;\r\n\t\t\t\t\tif (province) {\r\n\t\t\t\t\t\tkey += \"_\" + province;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet timeSerie = [];\r\n\t\t\t\t\tlet currentCases = 0;\r\n\t\t\t\t\t_.forIn(area, (val, dateString) => {\r\n\t\t\t\t\t\tconst date = moment(dateString).toISOString();\r\n\t\t\t\t\t\tconst value = Number(val);\r\n\t\t\t\t\t\tcurrentCases = value;\r\n\r\n\t\t\t\t\t\tif (value) {\r\n\t\t\t\t\t\t\ttimeSerie.push({\r\n\t\t\t\t\t\t\t\tdate,\r\n\t\t\t\t\t\t\t\tvalue\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tkey,\r\n\t\t\t\t\t\tdata: {\r\n\t\t\t\t\t\t\tname: province ? `${province} (${country})` : country,\r\n\t\t\t\t\t\t\tcountry,\r\n\t\t\t\t\t\t\tprovince,\r\n\t\t\t\t\t\t\tcurrentCases,\r\n\t\t\t\t\t\t\tcases: timeSerie\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdispatch(add(finalData));\r\n\t\t\t} else {\r\n\t\t\t\tthrow Error(\"Data loading failed!\")\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n};\r\n\r\n// ============ helpers ===========\r\n\r\n// ============ actions ===========\r\n\r\n// ============ export ===========\r\n\r\nexport default {\r\n\tloadCsvData\r\n}","import {Action as CommonAction} from '@gisatcz/ptr-state';\r\n\r\nimport confirmedCases from './ConfirmedCases/actions';\r\n\r\nexport default {\r\n\t...CommonAction,\r\n\tspecific: {\r\n\t\tconfirmedCases\r\n\t}\r\n}","import {createSelector} from 'reselect';\r\nimport {commonSelectors} from '@gisatcz/ptr-state';\r\nimport _ from \"lodash\";\r\n\r\nconst getSubstate = state => state.specific.confirmedCases;\r\n\r\nconst getAll = commonSelectors.getAll(getSubstate);\r\n\r\nconst getAllSortedByCases = createSelector(\r\n    [\r\n        getAll\r\n    ],\r\n    (allCases) => {\r\n        return _.orderBy(allCases, ['data.currentCases'], ['desc']);\r\n    }\r\n);\r\n\r\nconst getFilteredDataByConfirmedCasesThreshold = createSelector(\r\n    [\r\n        getAll,\r\n        (state, threshold) => threshold,\r\n        (state, threshold, countries) => countries\r\n    ],\r\n    (data, threshold, countries) => {\r\n        if (data.length) {\r\n            let filteredCountries = _.filter(data, item => {\r\n                return _.includes(countries, item.key);\r\n            });\r\n\r\n            let appliedThreshold = null;\r\n            if (filteredCountries) {\r\n                appliedThreshold = filteredCountries.map(country => {\r\n                    let filteredCases = [];\r\n\r\n                    let index = 1;\r\n                    _.forEach(country.data.cases, (item) => {\r\n                        if (item.value >= threshold) {\r\n                            filteredCases.push({\r\n                                ...item, day: index\r\n                            });\r\n                            index++;\r\n                        }\r\n                    });\r\n\r\n                    return {\r\n                        ...country,\r\n                        data: {\r\n                            ...country.data,\r\n                            cases: filteredCases\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            return appliedThreshold;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n);\r\n\r\nexport default {\r\n    getAll,\r\n    getAllSortedByCases,\r\n    getFilteredDataByConfirmedCasesThreshold\r\n};","import {Select as CommonSelect} from '@gisatcz/ptr-state';\r\n\r\nimport confirmedCases from \"./ConfirmedCases/selectors\";\r\n\r\nexport default {\r\n\t...CommonSelect,\r\n\tspecific: {\r\n\t\tconfirmedCases\r\n\t}\r\n}","import React from 'react';\r\nimport {LineChart} from \"@gisatcz/ptr-charts\";\r\nimport {HoverHandler} from \"@gisatcz/ptr-core\";\r\n\r\nclass ConfirmedCasesChart extends React.PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        if (this.props.data) {\r\n            return (\r\n                <HoverHandler>\r\n                    <LineChart\r\n                        key=\"time-scale-line\"\r\n\r\n                        data={this.props.data}\r\n                        keySourcePath=\"key\"\r\n                        nameSourcePath=\"data.name\"\r\n                        serieDataSourcePath=\"data.cases\"\r\n                        xSourcePath=\"day\"\r\n                        ySourcePath=\"value\"\r\n\r\n                        isSerie\r\n                        pointRadius={3}\r\n\r\n                        xValuesSize={1.8}\r\n                        xOptions={{\r\n                            name: \"Day\"\r\n                        }}\r\n\r\n                        yScaleType=\"logarithmic\"\r\n                        yValuesSize={3.8}\r\n                        yTitle\r\n                        yOptions={{\r\n                            name: \"Confirmed cases\",\r\n                            min: 100,\r\n                            max: 100000,\r\n                            unit: \"cases\"\r\n                        }}\r\n\r\n                        sorting={[[\"day\", \"asc\"]]}\r\n\r\n                        height={30}\r\n                        minWidth={10}\r\n\r\n                        legend\r\n                        withPoints={true}\r\n                        pointOptions={{\r\n                            radius: 4,\r\n                            showOnHover: true\r\n                        }}\r\n                    />\r\n                </HoverHandler>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default ConfirmedCasesChart;","import {connect} from '@gisatcz/ptr-state';\r\nimport Select from '../../../state/Select';\r\nimport Action from \"../../../state/Action\";\r\nimport presentation from './presentation';\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        data: Select.specific.confirmedCases.getFilteredDataByConfirmedCasesThreshold(state, ownProps.threshold, ownProps.countries)\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(presentation);\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport {Select} from '@gisatcz/ptr-atoms';\r\nimport ConfirmedCasesChart from \"./ConfirmedCasesChart\";\r\n\r\nconst thresholdOptions = [{\r\n    key: \"1\",\r\n    label: 1\r\n},{\r\n    key: \"20\",\r\n    label: 20\r\n},{\r\n    key: \"100\",\r\n    label: 100\r\n},{\r\n    key: \"500\",\r\n    label: 500\r\n},{\r\n    key: \"1000\",\r\n    label: 1000\r\n}];\r\n\r\nclass Confirmed extends React.PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n          selectedAreas: [\"Czechia\", \"Italy\", \"Norway\", \"US_New York\", \"Spain\", \"Korea, South\"],\r\n          threshold: thresholdOptions[2]\r\n        };\r\n\r\n        this.onAreaChange = this.onAreaChange.bind(this);\r\n        this.onThresholdChange = this.onThresholdChange.bind(this);\r\n    }\r\n\r\n    onAreaChange(selectedOptions) {\r\n        const keys = selectedOptions.map(option => option.key);\r\n        const sorted = _.sortBy(keys);\r\n\r\n        this.setState({\r\n           selectedAreas: sorted\r\n        });\r\n    }\r\n\r\n    onThresholdChange(threshold) {\r\n        this.setState({\r\n            threshold\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {/*<Select*/}\r\n                {/*    value={this.state.threshold}*/}\r\n                {/*    optionLabel=\"label\"*/}\r\n                {/*    optionValue=\"key\"*/}\r\n                {/*    options={thresholdOptions}*/}\r\n                {/*    onChange={this.onThresholdChange}*/}\r\n                {/*/>*/}\r\n                <Select\r\n                    value={this.state.selectedAreas}\r\n                    optionLabel=\"data.name\"\r\n                    optionValue=\"key\"\r\n                    options={this.props.allAreas}\r\n                    multi\r\n                    onChange={this.onAreaChange}\r\n                    clearable={false}\r\n                />\r\n                <ConfirmedCasesChart\r\n                    threshold={this.state.threshold.label}\r\n                    countries={this.state.selectedAreas}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Confirmed;","import {connect} from '@gisatcz/ptr-state';\r\nimport Select from '../../state/Select';\r\nimport Action from \"../../state/Action\";\r\nimport presentation from './presentation';\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        allAreas: Select.specific.confirmedCases.getAllSortedByCases(state)\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(presentation);\r\n","import React from 'react';\r\nimport './style.scss';\r\n\r\nclass Card extends React.PureComponent {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"crnvrs-card\">\r\n                <h3>{this.props.title}</h3>\r\n                <h4>{this.props.subtitle}</h4>\r\n                <div className=\"crnvrs-card-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from '@gisatcz/ptr-state';\r\nimport createStore, {createHistory} from \"./state/Store\";\r\n\r\n// base styles need to be imported before all components\r\nimport '@gisatcz/ptr-core/lib/styles/reset.css';\r\nimport '@gisatcz/ptr-core/lib/styles/base.scss';\r\nimport './styles/index.scss';\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport Action from \"./state/Action\";\r\nimport Confirmed from \"./components/Confirmed\";\r\nimport Card from \"./components/Card\";\r\n\r\nconst path = process.env.PUBLIC_URL;\r\nconst history = createHistory({basename: path});\r\nconst Store = createStore(history);\r\n\r\nStore.dispatch(Action.specific.confirmedCases.loadCsvData());\r\n\r\nReactDOM.render(\r\n    <>\r\n        <Provider store={Store}>\r\n            <div className=\"ptr-light\">\r\n                <Card title=\"Confirmed cases\" subtitle=\"from day with at least 100 cases\">\r\n                    <Confirmed/>\r\n                </Card>\r\n            </div>\r\n        </Provider>\r\n    </>, document.getElementById('ptr')\r\n);\r\n\r\nserviceWorker.unregister();","import { createStore, combineReducers, applyMiddleware, compose, thunk, logger, reduxBatch } from '@gisatcz/ptr-state';\r\nimport { connectRouter, routerMiddleware } from '@gisatcz/ptr-state';\r\nimport { createBrowserHistory } from 'history';\r\nimport { wrapHistory } from \"oaf-react-router\";\r\n\r\n// base types\r\nimport {appReducers} from '@gisatcz/ptr-state';\r\n\r\n// specific\r\nimport confirmedCases from './ConfirmedCases/reducers'\r\n\r\nexport const createHistory = (options) => {\r\n\tlet history = createBrowserHistory(options);\r\n\tconst settings = {\r\n\t\tprimaryFocusTarget: \"body\",\r\n\t\tsmoothScroll: true\r\n\t};\r\n\twrapHistory(history, settings);\r\n\treturn history;\r\n};\r\n\r\n// Redux store creator\r\nexport default history => {\r\n\r\n\tlet middleware = applyMiddleware(thunk, routerMiddleware(history));\r\n\tif (process.env.NODE_ENV === 'development') {\r\n\t\tmiddleware = applyMiddleware(thunk, logger, routerMiddleware(history));\r\n\t}\r\n\treturn createStore(combineReducers({\r\n\t\tspecific: combineReducers({\r\n\t\t\tconfirmedCases\r\n\t\t}),\r\n\t\tapp: appReducers,\r\n\t\trouter: connectRouter(history)\r\n\t}), compose(reduxBatch, middleware, reduxBatch, applyMiddleware(thunk), reduxBatch));\r\n}"],"sourceRoot":""}
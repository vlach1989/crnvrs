{"version":3,"sources":["constants/ActionTypes.js","state/ConfirmedCases/reducers.js","state/Deaths/reducers.js","serviceWorker.js","state/helpers.js","config.js","state/ConfirmedCases/actions.js","state/Deaths/actions.js","state/Action.js","state/Deaths/selectors.js","state/ConfirmedCases/selectors.js","state/Select.js","components/ConfirmedProgress/ConfirmedCasesChart/presentation.js","components/ConfirmedProgress/ConfirmedCasesChart/index.js","components/Card/index.js","components/ConfirmedProgress/presentation.js","components/ConfirmedProgress/index.js","components/TotalTableCard.js","components/ConfirmedTotal/index.js","components/ChangeTable.js","components/ConfirmedChange/index.js","components/StatusCard.js","components/CasesCountry/index.js","components/CasesWorldwide/index.js","components/DeathsCountry/index.js","components/DeathsWorldwide/index.js","components/DeathsTotal/index.js","components/DeathsChange/index.js","components/CasesDeaths/CasesDeathsChart/presentation.js","components/CasesDeaths/CasesDeathsChart/index.js","components/CasesDeaths/presentation.js","components/CasesDeaths/index.js","index.js","state/Store.js"],"names":["utils","deepKeyMirror","commonActionTypesDefinitions","CONFIRMED_CASES","ADD","DEATHS","INITIAL_STATE","DEFAULT_INITIAL_STATE","state","action","type","ActionTypes","common","add","Boolean","window","location","hostname","match","url","successAction","dispatch","Papa","parse","download","header","complete","result","data","Error","finalData","forEach","area","country","province","Lat","Long","key","timeSerie","_","forIn","val","dateString","date","moment","toISOString","value","Number","push","lastIndex","length","current","previousDay","threeDaysBefore","weekBefore","dailyChangeAbsolute","dailyChangeRelative","threeDaysChangeAbsolute","threeDaysChangeRelative","weeklyChangeAbsolute","weeklyChangeRelative","record","name","Daily","abs","rel","ThreeDays","Weekly","cases","corsProxy","confirmedCasesData","deathsData","load","helpers","config","CommonAction","specific","confirmedCases","deaths","getSubstate","getAll","commonSelectors","getAllAsObject","getByKey","getAllMoreThan5","createSelector","all","filter","item","getAllSortedByComponent","componentKey","componentsSelectors","getDataByComponentKey","allCases","componentState","sorting","orderBy","getSum","d","getAllWithMoreThan100","getAllSortedByCases","getAllSortedByChange","getFilteredDataByConfirmedCasesThreshold","threshold","countries","filteredCountries","includes","appliedThreshold","map","filteredCases","index","day","getFilteredCasesWithDeaths","DeathsSelectors","isEmpty","countryKey","CommonSelect","ConfirmedCasesChart","props","this","keySourcePath","nameSourcePath","serieDataSourcePath","xSourcePath","ySourcePath","isSerie","xValuesSize","xOptions","yScaleType","yValuesSize","yOptions","min","max","unit","height","legend","withPoints","pointOptions","showOnHover","React","PureComponent","connect","ownProps","Select","presentation","Card","classes","classnames","col","row","className","title","subtitle","switch","children","SwitchOption","active","disabled","onClick","Switch","option","activeOption","onChange","options","i","onOptionClick","bind","thresholdOptions","label","ConfirmedProgress","selectedAreas","onAreaChange","onThresholdChange","selectedOptions","keys","sorted","sortBy","setState","optionLabel","optionValue","allAreas","multi","clearable","ConfirmedChange","onContentChange","toLocaleString","ConfirmedTotal","activeContentOption","setActiveContentOption","onOrderChange","content","column","order","values","split","ordering","contentString","columnString","orderString","setSorting","activeColumn","absClass","relClass","contentOptions","allSortedByComponent","absChangeValue","relChangeValue","relClasses","red","undefined","minimumFractionDigits","maximumFractionDigits","components","get","Action","set","StatusCard","renderContent","dailyChangeRel","weeklyChangeRel","areaKey","CasesDeathsChart","defaultSchemePointColors","innerPaddingLeft","xLabel","xScaleType","yLabel","Store","history","middleware","applyMiddleware","thunk","routerMiddleware","createStore","combineReducers","app","appReducers","componentsReducers","router","connectRouter","compose","reduxBatch","createBrowserHistory","wrapHistory","primaryFocusTarget","smoothScroll","createHistory","basename","process","update","ReactDOM","render","store","CasesWorldwide","DeathsWorldwide","CasesCountry","DeathsCountry","CasesDeaths","DeathsTotal","DeathsChange","href","target","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.97618cc5.chunk.js","sourcesContent":["import {utils} from '@gisatcz/ptr-utils'\r\nimport {commonActionTypesDefinitions} from '@gisatcz/ptr-state';\r\n\r\nexport const crnvrs = {\r\n    CONFIRMED_CASES: {\r\n        ADD: null,\r\n    },\r\n    DEATHS: {\r\n        ADD: null\r\n    }\r\n};\r\n\r\nexport default utils.deepKeyMirror({...commonActionTypesDefinitions, ...crnvrs});\r\n\r\n","import ActionTypes from '../../constants/ActionTypes';\r\nimport {DEFAULT_INITIAL_STATE, commonReducers as common} from '@gisatcz/ptr-state';\r\n\r\nconst INITIAL_STATE = {\r\n\t...DEFAULT_INITIAL_STATE\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase ActionTypes.CONFIRMED_CASES.ADD:\r\n\t\t\treturn common.add(state, action);\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n","import ActionTypes from '../../constants/ActionTypes';\r\nimport {DEFAULT_INITIAL_STATE, commonReducers as common} from '@gisatcz/ptr-state';\r\n\r\nconst INITIAL_STATE = {\r\n    ...DEFAULT_INITIAL_STATE\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.DEATHS.ADD:\r\n            return common.add(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import Papa from \"papaparse\";\r\nimport _ from \"lodash\";\r\nimport moment from \"moment\";\r\n\r\nconst loadCsvData = (url, successAction) => (dispatch) => {\r\n    Papa.parse(url, {\r\n        download: true,\r\n        header: true,\r\n        complete: function(result) {\r\n            if (result && result.data) {\r\n                let finalData = [];\r\n\r\n                result.data.forEach(area => {\r\n                    const country = area[\"Country/Region\"];\r\n                    const province = area[\"Province/State\"];\r\n                    delete area[\"Country/Region\"];\r\n                    delete area[\"Province/State\"];\r\n                    delete area.Lat;\r\n                    delete area.Long;\r\n\r\n                    let key = country;\r\n                    if (province) {\r\n                        key += \"_\" + province;\r\n                    }\r\n\r\n                    let timeSerie = [];\r\n                    _.forIn(area, (val, dateString) => {\r\n                        const date = moment(dateString).toISOString();\r\n                        const value = Number(val);\r\n\r\n                        if (value) {\r\n                            timeSerie.push({\r\n                                date,\r\n                                value\r\n                            });\r\n                        }\r\n                    });\r\n\r\n                    const lastIndex = timeSerie.length - 1;\r\n                    const current = timeSerie[lastIndex] && timeSerie[lastIndex].value || 0;\r\n                    const previousDay = timeSerie[lastIndex - 1] && timeSerie[lastIndex - 1].value || 0;\r\n                    const threeDaysBefore = timeSerie[lastIndex - 3] && timeSerie[lastIndex - 3].value || 0;\r\n                    const weekBefore = timeSerie[lastIndex - 7] && timeSerie[lastIndex - 7].value || 0;\r\n\r\n                    const dailyChangeAbsolute = current - previousDay;\r\n                    const dailyChangeRelative = (current - previousDay) * 100/previousDay;\r\n\r\n                    const threeDaysChangeAbsolute = current - threeDaysBefore;\r\n                    const threeDaysChangeRelative = (current - threeDaysBefore) * 100/threeDaysBefore;\r\n\r\n                    const weeklyChangeAbsolute = current - weekBefore;\r\n                    const weeklyChangeRelative = (current - weekBefore) * 100/weekBefore;\r\n\r\n                    const record = {\r\n                        key,\r\n                        data: {\r\n                            name: province ? `${province} (${country})` : country,\r\n                            country,\r\n                            province,\r\n                            current,\r\n                            previousDay,\r\n                            threeDaysBefore,\r\n                            weekBefore,\r\n                            Daily: {\r\n                                abs: dailyChangeAbsolute,\r\n                                rel: dailyChangeRelative\r\n                            },\r\n                            ThreeDays: {\r\n                                abs: threeDaysChangeAbsolute,\r\n                                rel: threeDaysChangeRelative\r\n                            },\r\n                            Weekly: {\r\n                                abs: weeklyChangeAbsolute,\r\n                                rel: weeklyChangeRelative\r\n                            },\r\n                            cases: timeSerie\r\n                        }\r\n                    };\r\n\r\n                    finalData.push(record);\r\n                });\r\n\r\n                dispatch(successAction(finalData));\r\n            } else {\r\n                throw Error(\"Data loading failed!\")\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nexport default {\r\n    loadCsvData\r\n}","const corsProxy = \"https://cors-anywhere.herokuapp.com/\";\r\n\r\nexport default {\r\n    confirmedCasesData: corsProxy + \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\",\r\n    deathsData: corsProxy + \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv\"\r\n}","import ActionTypes from '../../constants/ActionTypes';\r\nimport {commonActions as common} from '@gisatcz/ptr-state';\r\n\r\nimport helpers from \"../helpers\";\r\n\r\nimport config from \"../../config\";\r\n\r\n// ============ creators ===========\r\n\r\nconst add = common.add(ActionTypes.CONFIRMED_CASES);\r\n\r\nconst load = () => (dispatch) => {\r\n\tdispatch(helpers.loadCsvData(config.confirmedCasesData, add));\r\n};\r\n\r\n// ============ helpers ===========\r\n\r\n// ============ actions ===========\r\n\r\n// ============ export ===========\r\n\r\nexport default {\r\n\tload\r\n}","import ActionTypes from '../../constants/ActionTypes';\r\nimport {commonActions as common} from '@gisatcz/ptr-state';\r\n\r\nimport helpers from \"../helpers\";\r\n\r\nimport config from \"../../config\";\r\n\r\n// ============ creators ===========\r\n\r\nconst add = common.add(ActionTypes.DEATHS);\r\n\r\nconst load = () => (dispatch) => {\r\n    dispatch(helpers.loadCsvData(config.deathsData, add));\r\n};\r\n\r\n// ============ helpers ===========\r\n\r\n// ============ actions ===========\r\n\r\n// ============ export ===========\r\n\r\nexport default {\r\n    load\r\n}","import {Action as CommonAction} from '@gisatcz/ptr-state';\r\n\r\nimport confirmedCases from './ConfirmedCases/actions';\r\nimport deaths from './Deaths/actions';\r\n\r\nexport default {\r\n\t...CommonAction,\r\n\tspecific: {\r\n\t\tconfirmedCases,\r\n\t\tdeaths\r\n\t}\r\n}","import {commonSelectors, componentsSelectors} from \"@gisatcz/ptr-state\";\r\nimport {createSelector} from 'reselect';\r\nimport _ from \"lodash\";\r\n\r\nconst getSubstate = state => state.specific.deaths;\r\n\r\nconst getAll = commonSelectors.getAll(getSubstate);\r\nconst getAllAsObject = commonSelectors.getAllAsObject(getSubstate);\r\nconst getByKey = commonSelectors.getByKey(getSubstate);\r\n\r\nconst getAllMoreThan5 = createSelector(\r\n    [getAll],\r\n    (all) => {\r\n        return _.filter(all, (item) => {\r\n            return item.data.current > 4;\r\n        });\r\n    }\r\n);\r\n\r\nconst getAllSortedByComponent = createSelector(\r\n    [\r\n        getAllMoreThan5,\r\n        (state,componentKey) => componentsSelectors.getDataByComponentKey(state, componentKey)\r\n    ],\r\n    (allCases, componentState) => {\r\n        const sorting = componentState.sorting;\r\n        return _.orderBy(allCases, [sorting[0]], [sorting[1]]);\r\n    }\r\n);\r\n\r\nconst getSum = createSelector(\r\n    [getAll],\r\n    (data) => {\r\n        let current = 0, previousDay = 0, threeDaysBefore = 0, weekBefore = 0;\r\n        _.forEach(data, item => {\r\n            if (item.data) {\r\n                const d = item.data;\r\n                current += d.current ? d.current : 0;\r\n                previousDay += d.previousDay ? d.previousDay : 0;\r\n                threeDaysBefore += d.threeDaysBefore ? d.threeDaysBefore : 0;\r\n                weekBefore += d.weekBefore ? d.weekBefore : 0;\r\n            }\r\n        });\r\n\r\n        return data && data.length ? {data: {current, previousDay, threeDaysBefore, weekBefore}} : null;\r\n    }\r\n);\r\n\r\nexport default {\r\n    getAll,\r\n    getAllAsObject,\r\n    getAllSortedByComponent,\r\n    getByKey,\r\n    getSum\r\n}","import {createSelector} from 'reselect';\r\nimport {commonSelectors, componentsSelectors} from '@gisatcz/ptr-state';\r\nimport DeathsSelectors from \"../Deaths/selectors\";\r\nimport _ from \"lodash\";\r\n\r\nconst getSubstate = state => state.specific.confirmedCases;\r\n\r\nconst getAll = commonSelectors.getAll(getSubstate);\r\nconst getAllAsObject = commonSelectors.getAllAsObject(getSubstate);\r\nconst getByKey = commonSelectors.getByKey(getSubstate);\r\n\r\nconst getAllWithMoreThan100 = createSelector(\r\n    [getAll],\r\n    (all) => {\r\n        return _.filter(all, (item) => {\r\n            return item.data.current > 99;\r\n        });\r\n    }\r\n);\r\n\r\nconst getAllSortedByComponent = createSelector(\r\n    [\r\n        getAllWithMoreThan100,\r\n        (state,componentKey) => componentsSelectors.getDataByComponentKey(state, componentKey)\r\n    ],\r\n    (allCases, componentState) => {\r\n        const sorting = componentState.sorting;\r\n        return _.orderBy(allCases, [sorting[0]], [sorting[1]]);\r\n    }\r\n);\r\n\r\nconst getAllSortedByCases = createSelector(\r\n    [\r\n        getAll\r\n    ],\r\n    (allCases) => {\r\n        return _.orderBy(allCases, ['data.current'], ['desc']);\r\n    }\r\n);\r\n\r\nconst getAllSortedByChange = createSelector(\r\n    [\r\n        getAll\r\n    ],\r\n    (allCases) => {\r\n        return _.orderBy(allCases, ['data.dailyChangeAbsolute'], ['desc']);\r\n    }\r\n);\r\n\r\nconst getFilteredDataByConfirmedCasesThreshold = createSelector(\r\n    [\r\n        getAll,\r\n        (state, threshold) => threshold,\r\n        (state, threshold, countries) => countries\r\n    ],\r\n    (data, threshold, countries) => {\r\n        if (data.length) {\r\n            let filteredCountries = _.filter(data, item => {\r\n                return _.includes(countries, item.key);\r\n            });\r\n\r\n            let appliedThreshold = null;\r\n            if (filteredCountries) {\r\n                appliedThreshold = filteredCountries.map(country => {\r\n                    let filteredCases = [];\r\n\r\n                    let index = 1;\r\n                    _.forEach(country.data.cases, (item) => {\r\n                        if (item.value >= threshold) {\r\n                            filteredCases.push({\r\n                                ...item, day: index\r\n                            });\r\n                            index++;\r\n                        }\r\n                    });\r\n\r\n                    return {\r\n                        ...country,\r\n                        data: {\r\n                            ...country.data,\r\n                            cases: filteredCases\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            return appliedThreshold;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n);\r\n\r\nconst getSum = createSelector(\r\n    [getAll],\r\n    (data) => {\r\n        let current = 0, previousDay = 0, threeDaysBefore = 0, weekBefore = 0;\r\n        _.forEach(data, item => {\r\n           if (item.data) {\r\n               const d = item.data;\r\n               current += d.current ? d.current : 0;\r\n               previousDay += d.previousDay ? d.previousDay : 0;\r\n               threeDaysBefore += d.threeDaysBefore ? d.threeDaysBefore : 0;\r\n               weekBefore += d.weekBefore ? d.weekBefore : 0;\r\n           }\r\n        });\r\n\r\n        return data && data.length ? {data: {current, previousDay, threeDaysBefore, weekBefore}} : null;\r\n    }\r\n);\r\n\r\nconst getFilteredCasesWithDeaths = createSelector(\r\n    [\r\n        getAllAsObject,\r\n        DeathsSelectors.getAllAsObject,\r\n        (state, countries) => countries\r\n    ],\r\n    (cases, deaths, countries) => {\r\n        if (!_.isEmpty(cases) && !_.isEmpty(deaths)) {\r\n            return countries.map(countryKey => {\r\n               return {\r\n                   key: countryKey,\r\n                   cases: cases[countryKey],\r\n                   deaths: deaths[countryKey]\r\n               }\r\n            });\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n);\r\n\r\nexport default {\r\n    getAll,\r\n    getAllSortedByCases,\r\n    getAllSortedByChange,\r\n    getAllSortedByComponent,\r\n    getFilteredDataByConfirmedCasesThreshold,\r\n    getFilteredCasesWithDeaths,\r\n\r\n    getByKey,\r\n    getSum\r\n};","import {Select as CommonSelect} from '@gisatcz/ptr-state';\r\n\r\nimport confirmedCases from \"./ConfirmedCases/selectors\";\r\nimport deaths from \"./Deaths/selectors\";\r\n\r\nexport default {\r\n\t...CommonSelect,\r\n\tspecific: {\r\n\t\tconfirmedCases,\r\n\t\tdeaths\r\n\t}\r\n}","import React from 'react';\r\nimport {LineChart} from \"@gisatcz/ptr-charts\";\r\nimport {HoverHandler} from \"@gisatcz/ptr-core\";\r\n\r\nclass ConfirmedCasesChart extends React.PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        if (this.props.data) {\r\n            return (\r\n                <HoverHandler>\r\n                    <LineChart\r\n                        key=\"time-scale-line\"\r\n\r\n                        data={this.props.data}\r\n                        keySourcePath=\"key\"\r\n                        nameSourcePath=\"data.name\"\r\n                        serieDataSourcePath=\"data.cases\"\r\n                        xSourcePath=\"day\"\r\n                        ySourcePath=\"value\"\r\n\r\n                        isSerie\r\n\r\n                        xValuesSize={1.8}\r\n                        xOptions={{\r\n                            name: \"Day\"\r\n                        }}\r\n\r\n                        yScaleType=\"logarithmic\"\r\n                        yValuesSize={4}\r\n                        yOptions={{\r\n                            name: \"Confirmed cases\",\r\n                            min: 1000,\r\n                            max: 1000000,\r\n                            unit: \"cases\"\r\n                        }}\r\n\r\n                        sorting={[[\"day\", \"asc\"]]}\r\n\r\n                        height={21}\r\n\r\n                        legend\r\n                        withPoints={true}\r\n                        pointOptions={{\r\n                            showOnHover: true\r\n                        }}\r\n                    />\r\n                </HoverHandler>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default ConfirmedCasesChart;","import {connect} from '@gisatcz/ptr-state';\r\nimport Select from '../../../state/Select';\r\nimport Action from \"../../../state/Action\";\r\nimport presentation from './presentation';\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        data: Select.specific.confirmedCases.getFilteredDataByConfirmedCasesThreshold(state, ownProps.threshold, ownProps.countries)\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(presentation);\r\n","import React from 'react';\r\nimport classnames from 'classnames';\r\nimport './style.scss';\r\n\r\nclass Card extends React.PureComponent {\r\n\r\n    render() {\r\n        const classes = classnames(\"crnvrs-card\", {\r\n            \"width-2\": this.props.col === 2,\r\n            \"height-2\": this.props.row === 2,\r\n            \"height-3\": this.props.row === 3,\r\n        });\r\n\r\n        return (\r\n            <div className={classes}>\r\n                <div className=\"crnvrs-card-header\">\r\n                    <div className=\"crnvrs-card-title\">\r\n                        {this.props.title}\r\n                        <span>{this.props.subtitle ? (`(${this.props.subtitle})`) : null}</span>\r\n                    </div>\r\n                    {this.props.switch}\r\n                </div>\r\n                <div className=\"crnvrs-card-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;\r\n\r\nconst SwitchOption = (props) => {\r\n    const classes = classnames(\"crnvrs-card-switch-option\", {\r\n        \"active\": props.active,\r\n        \"disabled\": props.disabled\r\n    });\r\n\r\n    return (\r\n        <div className={classes} onClick={props.onClick}>{props.children}</div>\r\n    );\r\n};\r\n\r\nexport class Switch extends React.PureComponent {\r\n    onOptionClick(option) {\r\n        if (option !== this.props.activeOption) {\r\n            this.props.onChange(option);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"crnvrs-card-switch\">\r\n                {this.props.options && this.props.options.map((option, i) => (\r\n                    <SwitchOption\r\n                        key={i}\r\n                        active={this.props.active === option}\r\n                        onClick={this.onOptionClick.bind(this, option)}\r\n                    >\r\n                        {option}\r\n                    </SwitchOption>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport _ from 'lodash';\r\nimport {Select} from '@gisatcz/ptr-atoms';\r\nimport ConfirmedCasesChart from \"./ConfirmedCasesChart\";\r\nimport Card from \"../Card\";\r\n\r\nconst thresholdOptions = [{\r\n    key: \"1\",\r\n    label: 1\r\n},{\r\n    key: \"20\",\r\n    label: 20\r\n},{\r\n    key: \"100\",\r\n    label: 100\r\n},{\r\n    key: \"500\",\r\n    label: 500\r\n},{\r\n    key: \"1000\",\r\n    label: 1000\r\n}];\r\n\r\nclass ConfirmedProgress extends React.PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n          selectedAreas: [\"Spain\", \"Italy\", \"Czechia\", \"US\", \"Norway\", \"Germany\", \"Austria\"],\r\n          threshold: thresholdOptions[4]\r\n        };\r\n\r\n        this.onAreaChange = this.onAreaChange.bind(this);\r\n        this.onThresholdChange = this.onThresholdChange.bind(this);\r\n    }\r\n\r\n    onAreaChange(selectedOptions) {\r\n        const keys = selectedOptions.map(option => option.key);\r\n        const sorted = _.sortBy(keys);\r\n\r\n        this.setState({\r\n           selectedAreas: sorted\r\n        });\r\n    }\r\n\r\n    onThresholdChange(threshold) {\r\n        this.setState({\r\n            threshold\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card\r\n                title=\"Confirmed cases progress\"\r\n                subtitle=\"from the day with at least 1000 cases\"\r\n                col={2}\r\n                row={3}\r\n            >\r\n                <Select\r\n                    value={this.state.selectedAreas}\r\n                    optionLabel=\"data.name\"\r\n                    optionValue=\"key\"\r\n                    options={this.props.allAreas}\r\n                    multi\r\n                    onChange={this.onAreaChange}\r\n                    clearable={false}\r\n                />\r\n                <ConfirmedCasesChart\r\n                    threshold={this.state.threshold.label}\r\n                    countries={this.state.selectedAreas}\r\n                />\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmedProgress;","import {connect} from '@gisatcz/ptr-state';\r\nimport Select from '../../state/Select';\r\nimport Action from \"../../state/Action\";\r\nimport presentation from './presentation';\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        allAreas: Select.specific.confirmedCases.getAllSortedByCases(state)\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(presentation);\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport Card, {Switch} from \"./Card\";\r\n\r\nclass ConfirmedChange extends React.PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onContentChange = this.onContentChange.bind(this);\r\n    }\r\n\r\n    onContentChange() {\r\n        // TODO\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card\r\n                title={this.props.title}\r\n                row={3}\r\n            >\r\n                <table className=\"crnvrs-table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Country/province</th>\r\n                            <th className=\"crnvrs-table-column-right\">Total</th>\r\n                        </tr>\r\n                        {this.props.allAreas.map((area, i) =>\r\n                            <tr key={i}>\r\n                                <td>{i+1}. {area.data.name}</td>\r\n                                <td className=\"crnvrs-table-column-right\">{area.data.current && area.data.current.toLocaleString()}</td>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmedChange;","import {connect} from '@gisatcz/ptr-state';\r\nimport Select from '../../state/Select';\r\nimport Action from \"../../state/Action\";\r\nimport presentation from '../TotalTableCard';\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        allAreas: Select.specific.confirmedCases.getAllSortedByComponent(state, ownProps.componentKey)\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(presentation);\r\n","import React from 'react';\r\nimport classnames from 'classnames';\r\nimport _ from 'lodash';\r\nimport Card, {Switch} from \"./Card\";\r\n\r\nclass ConfirmedTotal extends React.PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onContentChange = this.onContentChange.bind(this);\r\n    }\r\n\r\n    onContentChange(activeContentOption) {\r\n        this.props.setActiveContentOption(activeContentOption);\r\n        this.onOrderChange(activeContentOption);\r\n    }\r\n\r\n    onOrderChange(content, column, order) {\r\n        const values = this.props.sorting[0].split(\".\");\r\n        const ordering = this.props.sorting[1];\r\n        const contentString = content || values[1];\r\n        const columnString = column || values[2];\r\n        const orderString = ordering || order;\r\n\r\n        this.props.setSorting([`data.${contentString}.${columnString}`, orderString]);\r\n    }\r\n\r\n    render() {\r\n        const values = this.props.sorting[0].split(\".\");\r\n        const activeColumn = values[2];\r\n\r\n        const absClass = classnames(\"crnvrs-table-column-right sortable\", {\r\n            active: activeColumn === \"abs\"\r\n        });\r\n\r\n        const relClass = classnames(\"crnvrs-table-column-right sortable\", {\r\n            active: activeColumn === \"rel\"\r\n        });\r\n\r\n        return (\r\n            <Card\r\n                title={this.props.title}\r\n                row={3}\r\n                switch={\r\n                    <Switch\r\n                        onChange={this.onContentChange}\r\n                        options={this.props.contentOptions}\r\n                        active={this.props.activeContentOption}\r\n                    />\r\n                }\r\n            >\r\n                <table className=\"crnvrs-table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Country/province</th>\r\n                            <th onClick={this.onOrderChange.bind(this, null, 'abs', null)} className={absClass}>Abs</th>\r\n                            <th onClick={this.onOrderChange.bind(this, null, 'rel', null)} className={relClass}>%</th>\r\n                        </tr>\r\n                        {this.props.allSortedByComponent.map((area, i) => {\r\n                            let absChangeValue = area.data[this.props.activeContentOption].abs;\r\n                            let relChangeValue = area.data[this.props.activeContentOption].rel;\r\n\r\n                            const relClasses = classnames(\"crnvrs-table-column-right\", {\r\n                                red: relChangeValue > 0\r\n                            });\r\n\r\n                            return (\r\n                                <tr key={i}>\r\n                                    <td>{i+1}. {area.data.name}</td>\r\n                                    <td className=\"crnvrs-table-column-right\">{absChangeValue && absChangeValue.toLocaleString()}</td>\r\n                                    <td className={relClasses}>{relChangeValue && relChangeValue.toLocaleString(undefined, {minimumFractionDigits: 1, maximumFractionDigits: 1})}</td>\r\n                                </tr>\r\n                            );\r\n                        }\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmedTotal;","import {connect} from '@gisatcz/ptr-state';\r\nimport Select from '../../state/Select';\r\nimport Action from \"../../state/Action\";\r\nimport presentation from '../ChangeTable';\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        allSortedByComponent: Select.specific.confirmedCases.getAllSortedByComponent(state, ownProps.componentKey),\r\n        contentOptions: Select.components.get(state, ownProps.componentKey, \"contentOptions\"),\r\n        activeContentOption: Select.components.get(state, ownProps.componentKey, \"activeContentOption\"),\r\n        sorting: Select.components.get(state, ownProps.componentKey, \"sorting\")\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        setActiveContentOption: (activeContentOption) => {\r\n            dispatch(Action.components.set(ownProps.componentKey, \"activeContentOption\", activeContentOption))\r\n        },\r\n        setSorting: (sorting) => {\r\n            dispatch(Action.components.set(ownProps.componentKey, \"sorting\", sorting));\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(presentation);\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport Card, {Switch} from \"./Card\";\r\n\r\nclass StatusCard extends React.PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card\r\n                title={this.props.title}\r\n            >\r\n                {this.props.data ? this.renderContent() : null}\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    renderContent() {\r\n        const data = this.props.data && this.props.data.data;\r\n\r\n        if (data) {\r\n            const dailyChangeAbs = data.current - data.previousDay;\r\n            const dailyChangeRel = dailyChangeAbs*100/data.previousDay;\r\n\r\n            const weeklyChangeAbs = data.current - data.weekBefore;\r\n            const weeklyChangeRel = weeklyChangeAbs*100/data.weekBefore;\r\n\r\n            return (\r\n                <div className=\"crnvrs-overview\">\r\n                    <div className=\"crnvrs-overview-title\">\r\n                        {data.current.toLocaleString()}\r\n                    </div>\r\n                    <div className=\"crnvrs-overview-subtitle\">\r\n                        <em>{`+${dailyChangeRel.toLocaleString(undefined, {minimumFractionDigits: 1, maximumFractionDigits: 1})}`} %</em> daily change\r\n                    </div>\r\n                    <div className=\"crnvrs-overview-subtitle\">\r\n                        <em>{`+${weeklyChangeRel.toLocaleString(undefined, {minimumFractionDigits: 1, maximumFractionDigits: 1})}`} %</em> weekly change\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default StatusCard;","import {connect} from '@gisatcz/ptr-state';\r\nimport Select from '../../state/Select';\r\nimport Action from \"../../state/Action\";\r\nimport presentation from '../StatusCard';\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        data: Select.specific.confirmedCases.getByKey(state, ownProps.areaKey)\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(presentation);\r\n","import {connect} from '@gisatcz/ptr-state';\r\nimport Select from '../../state/Select';\r\nimport Action from \"../../state/Action\";\r\nimport presentation from '../StatusCard';\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        data: Select.specific.confirmedCases.getSum(state)\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(presentation);\r\n","import {connect} from '@gisatcz/ptr-state';\r\nimport Select from '../../state/Select';\r\nimport Action from \"../../state/Action\";\r\nimport presentation from '../StatusCard';\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        data: Select.specific.deaths.getByKey(state, ownProps.areaKey)\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(presentation);\r\n","import {connect} from '@gisatcz/ptr-state';\r\nimport Select from '../../state/Select';\r\nimport Action from \"../../state/Action\";\r\nimport presentation from '../StatusCard';\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        data: Select.specific.deaths.getSum(state)\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(presentation);\r\n","import {connect} from '@gisatcz/ptr-state';\r\nimport Select from '../../state/Select';\r\nimport Action from \"../../state/Action\";\r\nimport presentation from '../TotalTableCard';\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        allAreas: Select.specific.deaths.getAllSortedByComponent(state, ownProps.componentKey)\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(presentation);\r\n","import {connect} from '@gisatcz/ptr-state';\r\nimport Select from '../../state/Select';\r\nimport Action from \"../../state/Action\";\r\nimport presentation from '../ChangeTable';\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        allSortedByComponent: Select.specific.deaths.getAllSortedByComponent(state, ownProps.componentKey),\r\n        contentOptions: Select.components.get(state, ownProps.componentKey, \"contentOptions\"),\r\n        activeContentOption: Select.components.get(state, ownProps.componentKey, \"activeContentOption\"),\r\n        sorting: Select.components.get(state, ownProps.componentKey, \"sorting\")\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        setActiveContentOption: (activeContentOption) => {\r\n            dispatch(Action.components.set(ownProps.componentKey, \"activeContentOption\", activeContentOption))\r\n        },\r\n        setSorting: (sorting) => {\r\n            dispatch(Action.components.set(ownProps.componentKey, \"sorting\", sorting));\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(presentation);\r\n","import React from 'react';\r\nimport {ScatterChart} from \"@gisatcz/ptr-charts\";\r\nimport {HoverHandler} from \"@gisatcz/ptr-core\";\r\n\r\nclass CasesDeathsChart extends React.PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        if (this.props.data) {\r\n            return (\r\n                <HoverHandler>\r\n                    <ScatterChart\r\n                        key=\"casesDeaths\"\r\n                        data={this.props.data}\r\n                        defaultSchemePointColors\r\n\r\n                        xSourcePath=\"cases.data.current\"\r\n                        ySourcePath=\"deaths.data.current\"\r\n                        nameSourcePath=\"cases.data.name\"\r\n                        keySourcePath=\"key\"\r\n\r\n                        innerPaddingLeft={0}\r\n                        height={23}\r\n\r\n                        xLabel\r\n                        xValuesSize={4}\r\n                        xScaleType=\"logarithmic\"\r\n                        xOptions={{\r\n                            name: \"Confirmed cases\",\r\n                            min: 1000,\r\n                            max: 1000000\r\n                        }}\r\n\r\n                        yLabel\r\n                        yValuesSize={4.5}\r\n                        yScaleType=\"logarithmic\"\r\n                        yOptions={{\r\n                            name: \"Deaths\",\r\n                            min: 10,\r\n                            max: 100000\r\n                        }}\r\n\r\n                        legend\r\n                    />\r\n                </HoverHandler>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default CasesDeathsChart;","import {connect} from '@gisatcz/ptr-state';\r\nimport Select from '../../../state/Select';\r\nimport Action from \"../../../state/Action\";\r\nimport presentation from './presentation';\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        data: Select.specific.confirmedCases.getFilteredCasesWithDeaths(state, ownProps.countries)\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(presentation);\r\n","import React from 'react';\r\nimport CasesDeathsChart from \"./CasesDeathsChart\";\r\nimport Card from \"../Card\";\r\n\r\nclass ConfirmedProgress extends React.PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedAreas: [\"Austria\", \"Czechia\", \"Germany\", \"Italy\", \"Norway\", \"Spain\", \"US\", \"Sweden\", \"France\", \"United Kingdom\"],\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card\r\n                title=\"Confirmed cases vs. deaths\"\r\n                col={2}\r\n                row={3}\r\n            >\r\n                <CasesDeathsChart\r\n                    countries={this.state.selectedAreas}\r\n                />\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmedProgress;","import {connect} from '@gisatcz/ptr-state';\r\nimport Select from '../../state/Select';\r\nimport Action from \"../../state/Action\";\r\nimport presentation from './presentation';\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(presentation);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from '@gisatcz/ptr-state';\r\nimport createStore, {createHistory} from \"./state/Store\";\r\n\r\n// base styles need to be imported before all components\r\nimport '@gisatcz/ptr-core/lib/styles/reset.css';\r\nimport '@gisatcz/ptr-core/lib/styles/base.scss';\r\nimport './styles/index.scss';\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport Action from \"./state/Action\";\r\nimport ConfirmedProgress from \"./components/ConfirmedProgress\";\r\nimport ConfirmedTotal from \"./components/ConfirmedTotal\";\r\nimport ConfirmedChange from \"./components/ConfirmedChange\";\r\nimport CasesCountry from \"./components/CasesCountry\";\r\nimport CasesWorldwide from \"./components/CasesWorldwide\";\r\nimport DeathsCountry from \"./components/DeathsCountry\";\r\nimport DeathsWorldwide from \"./components/DeathsWorldwide\";\r\nimport DeathsTotal from \"./components/DeathsTotal\";\r\nimport DeathsChange from \"./components/DeathsChange\";\r\nimport CasesDeaths from \"./components/CasesDeaths\";\r\n\r\nconst path = process.env.PUBLIC_URL;\r\nconst history = createHistory({basename: path});\r\nconst Store = createStore(history);\r\n\r\nStore.dispatch(Action.specific.confirmedCases.load());\r\nStore.dispatch(Action.specific.deaths.load());\r\n\r\nStore.dispatch(Action.components.update(\"ConfirmedChangeTable\", {\r\n    contentOptions: [\"Daily\", \"Weekly\"],\r\n    activeContentOption: \"Daily\",\r\n    sorting: [\"data.Daily.abs\", \"desc\"]\r\n}));\r\n\r\nStore.dispatch(Action.components.update(\"DeathsChangeTable\", {\r\n    contentOptions: [\"Daily\", \"Weekly\"],\r\n    activeContentOption: \"Daily\",\r\n    sorting: [\"data.Daily.abs\", \"desc\"]\r\n}));\r\n\r\n\r\nStore.dispatch(Action.components.update(\"ConfirmedTotalTable\", {\r\n    sorting: [\"data.current\", \"desc\"]\r\n}));\r\n\r\nStore.dispatch(Action.components.update(\"DeathsTotalTable\", {\r\n    sorting: [\"data.current\", \"desc\"]\r\n}));\r\n\r\nReactDOM.render(\r\n    <>\r\n        <Provider store={Store}>\r\n            <div className=\"ptr-light\">\r\n                <div className=\"crnvrs-card-grid\">\r\n                    <div className=\"crnvrs-card-row\">\r\n                        <div className=\"crnvrs-card-group\">\r\n                            <CasesWorldwide title=\"Confirmed cases worldwide\"/>\r\n                            <DeathsWorldwide title=\"Deaths worldwide\"/>\r\n                        </div>\r\n\r\n                        <div className=\"crnvrs-card-group\">\r\n                            <CasesCountry title=\"Confirmed cases Czech Republic\" areaKey=\"Czechia\"/>\r\n                            <DeathsCountry title=\"Deaths Czech Republic\" areaKey=\"Czechia\"/>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"crnvrs-card-row\">\r\n                        <div className=\"crnvrs-card-group vertical\">\r\n                            <ConfirmedProgress/>\r\n                        </div>\r\n\r\n                        <div className=\"crnvrs-card-group\">\r\n                            <ConfirmedTotal\r\n                                componentKey=\"ConfirmedTotalTable\"\r\n                                title=\"Confirmed cases total\"\r\n                            />\r\n                            <ConfirmedChange\r\n                                componentKey=\"ConfirmedChangeTable\"\r\n                                title=\"Cases change\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"crnvrs-card-row\">\r\n                        <div className=\"crnvrs-card-group vertical\">\r\n                            <CasesDeaths/>\r\n                        </div>\r\n                        <div className=\"crnvrs-card-group\">\r\n                            <DeathsTotal\r\n                                componentKey=\"DeathsTotalTable\"\r\n                                title=\"Deaths total\"\r\n                            />\r\n                            <DeathsChange\r\n                                componentKey=\"DeathsChangeTable\"\r\n                                title=\"Deaths change\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"crnvrs-data-source\">Data source: <a href=\"https://github.com/CSSEGISandData/COVID-19\" target=\"_blank\">Johns Hopkins University</a></div>\r\n            </div>\r\n        </Provider>\r\n    </>, document.getElementById('ptr')\r\n);\r\n\r\nserviceWorker.unregister();","import {\r\n\tcreateStore,\r\n\tcombineReducers,\r\n\tapplyMiddleware,\r\n\tcompose,\r\n\tthunk,\r\n\tlogger,\r\n\treduxBatch,\r\n\tcomponentsReducers\r\n} from '@gisatcz/ptr-state';\r\nimport { connectRouter, routerMiddleware } from '@gisatcz/ptr-state';\r\nimport { createBrowserHistory } from 'history';\r\nimport { wrapHistory } from \"oaf-react-router\";\r\n\r\n// base types\r\nimport {appReducers} from '@gisatcz/ptr-state';\r\n\r\n// specific\r\nimport confirmedCases from './ConfirmedCases/reducers'\r\nimport deaths from './Deaths/reducers'\r\n\r\nexport const createHistory = (options) => {\r\n\tlet history = createBrowserHistory(options);\r\n\tconst settings = {\r\n\t\tprimaryFocusTarget: \"body\",\r\n\t\tsmoothScroll: true\r\n\t};\r\n\twrapHistory(history, settings);\r\n\treturn history;\r\n};\r\n\r\n// Redux store creator\r\nexport default history => {\r\n\r\n\tlet middleware = applyMiddleware(thunk, routerMiddleware(history));\r\n\tif (process.env.NODE_ENV === 'development') {\r\n\t\tmiddleware = applyMiddleware(thunk, logger, routerMiddleware(history));\r\n\t}\r\n\treturn createStore(combineReducers({\r\n\t\tspecific: combineReducers({\r\n\t\t\tconfirmedCases,\r\n\t\t\tdeaths\r\n\t\t}),\r\n\t\tapp: appReducers,\r\n\t\tcomponents: componentsReducers,\r\n\t\trouter: connectRouter(history)\r\n\t}), compose(reduxBatch, middleware, reduxBatch, applyMiddleware(thunk), reduxBatch));\r\n}"],"sourceRoot":""}
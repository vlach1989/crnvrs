{"version":3,"sources":["constants/ActionTypes.js","state/ConfirmedCases/reducers.js","serviceWorker.js","config.js","state/ConfirmedCases/actions.js","state/Action.js","state/ConfirmedCases/selectors.js","state/Select.js","components/Confirmed/ConfirmedCasesChart/presentation.js","components/Confirmed/ConfirmedCasesChart/index.js","components/Card/index.js","components/Confirmed/presentation.js","components/Confirmed/index.js","components/ConfirmedTotal/presentation.js","components/ConfirmedTotal/index.js","components/ConfirmedChange/presentation.js","components/ConfirmedChange/index.js","index.js","state/Store.js"],"names":["utils","deepKeyMirror","commonActionTypesDefinitions","CONFIRMED_CASES","ADD","INITIAL_STATE","DEFAULT_INITIAL_STATE","state","action","type","ActionTypes","common","add","Boolean","window","location","hostname","match","confirmedCasesData","corsProxy","loadCsvData","dispatch","Papa","parse","config","download","header","complete","result","data","Error","finalData","forEach","area","country","province","Lat","Long","key","timeSerie","_","forIn","val","dateString","date","moment","toISOString","value","Number","push","lastIndex","length","current","previousDay","threeDaysBefore","weekBefore","dailyChangeAbsolute","dailyChangeRelative","threeDaysChangeAbsolute","threeDaysChangeRelative","weeklyChangeAbsolute","weeklyChangeRelative","record","name","Daily","abs","rel","ThreeDays","Weekly","cases","CommonAction","specific","confirmedCases","getAll","commonSelectors","getAllSortedByComponent","createSelector","componentKey","componentsSelectors","getDataByComponentKey","allCases","componentState","sorting","orderBy","getAllSortedByCases","getAllSortedByChange","getFilteredDataByConfirmedCasesThreshold","threshold","countries","filteredCountries","filter","item","includes","appliedThreshold","map","filteredCases","index","day","CommonSelect","ConfirmedCasesChart","props","this","keySourcePath","nameSourcePath","serieDataSourcePath","xSourcePath","ySourcePath","isSerie","pointRadius","xValuesSize","xOptions","yScaleType","yValuesSize","yOptions","min","max","unit","height","legend","withPoints","pointOptions","radius","showOnHover","React","PureComponent","connect","ownProps","Select","presentation","Card","classes","classnames","col","className","title","subtitle","switch","children","SwitchOption","active","disabled","onClick","Switch","option","activeOption","onChange","options","onOptionClick","bind","thresholdOptions","label","Confirmed","selectedAreas","onAreaChange","onThresholdChange","selectedOptions","keys","sorted","sortBy","setState","optionLabel","optionValue","allAreas","multi","clearable","ConfirmedChange","onContentChange","i","toLocaleString","ConfirmedTotal","activeContentOption","setActiveContentOption","onOrderChange","content","column","order","values","split","ordering","contentString","columnString","orderString","setSorting","activeColumn","absClass","relClass","contentOptions","allSortedByComponent","absChangeValue","relChangeValue","relClasses","red","undefined","minimumFractionDigits","maximumFractionDigits","components","get","Action","set","Store","history","middleware","applyMiddleware","thunk","routerMiddleware","createStore","combineReducers","app","appReducers","componentsReducers","router","connectRouter","compose","reduxBatch","createBrowserHistory","wrapHistory","primaryFocusTarget","smoothScroll","createHistory","basename","process","update","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.92bd3df2.chunk.js","sourcesContent":["import {utils} from '@gisatcz/ptr-utils'\r\nimport {commonActionTypesDefinitions} from '@gisatcz/ptr-state';\r\n\r\nexport const crnvrs = {\r\n    CONFIRMED_CASES: {\r\n        ADD: null,\r\n    }\r\n};\r\n\r\nexport default utils.deepKeyMirror({...commonActionTypesDefinitions, ...crnvrs});\r\n\r\n","import ActionTypes from '../../constants/ActionTypes';\r\nimport {DEFAULT_INITIAL_STATE, commonReducers as common} from '@gisatcz/ptr-state';\r\n\r\nconst INITIAL_STATE = {\r\n\t...DEFAULT_INITIAL_STATE\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase ActionTypes.CONFIRMED_CASES.ADD:\r\n\t\t\treturn common.add(state, action);\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const corsProxy = \"https://cors-anywhere.herokuapp.com/\";\r\n\r\nexport default {\r\n    confirmedCasesData: corsProxy + \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\"\r\n}","import moment from 'moment';\r\nimport _ from 'lodash';\r\nimport ActionTypes from '../../constants/ActionTypes';\r\nimport {commonActions as common} from '@gisatcz/ptr-state';\r\nimport Papa from 'papaparse';\r\n\r\nimport config from \"../../config\";\r\n\r\n// ============ creators ===========\r\n\r\nconst add = common.add(ActionTypes.CONFIRMED_CASES);\r\n\r\nconst loadCsvData = () => (dispatch) => {\r\n\tPapa.parse(config.confirmedCasesData, {\r\n\t\tdownload: true,\r\n\t\theader: true,\r\n\t\tcomplete: function(result) {\r\n\t\t\tif (result && result.data) {\r\n\t\t\t\tlet finalData = [];\r\n\r\n\t\t\t\tresult.data.forEach(area => {\r\n\t\t\t\t\tconst country = area[\"Country/Region\"];\r\n\t\t\t\t\tconst province = area[\"Province/State\"];\r\n\t\t\t\t\tdelete area[\"Country/Region\"];\r\n\t\t\t\t\tdelete area[\"Province/State\"];\r\n\t\t\t\t\tdelete area.Lat;\r\n\t\t\t\t\tdelete area.Long;\r\n\r\n\t\t\t\t\tlet key = country;\r\n\t\t\t\t\tif (province) {\r\n\t\t\t\t\t\tkey += \"_\" + province;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet timeSerie = [];\r\n\t\t\t\t\t_.forIn(area, (val, dateString) => {\r\n\t\t\t\t\t\tconst date = moment(dateString).toISOString();\r\n\t\t\t\t\t\tconst value = Number(val);\r\n\r\n\t\t\t\t\t\tif (value) {\r\n\t\t\t\t\t\t\ttimeSerie.push({\r\n\t\t\t\t\t\t\t\tdate,\r\n\t\t\t\t\t\t\t\tvalue\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tconst lastIndex = timeSerie.length - 1;\r\n\t\t\t\t\tconst current = timeSerie[lastIndex] && timeSerie[lastIndex].value;\r\n\t\t\t\t\tconst previousDay = timeSerie[lastIndex - 1] && timeSerie[lastIndex - 1].value;\r\n\t\t\t\t\tconst threeDaysBefore = timeSerie[lastIndex - 3] && timeSerie[lastIndex - 3].value;\r\n\t\t\t\t\tconst weekBefore = timeSerie[lastIndex - 7] && timeSerie[lastIndex - 7].value;\r\n\r\n\t\t\t\t\tconst dailyChangeAbsolute = current - previousDay;\r\n\t\t\t\t\tconst dailyChangeRelative = (current - previousDay) * 100/previousDay;\r\n\r\n\t\t\t\t\tconst threeDaysChangeAbsolute = current - threeDaysBefore;\r\n\t\t\t\t\tconst threeDaysChangeRelative = (current - threeDaysBefore) * 100/threeDaysBefore;\r\n\r\n\t\t\t\t\tconst weeklyChangeAbsolute = current - weekBefore;\r\n\t\t\t\t\tconst weeklyChangeRelative = (current - weekBefore) * 100/weekBefore;\r\n\r\n\t\t\t\t\tconst record = {\r\n\t\t\t\t\t\tkey,\r\n\t\t\t\t\t\tdata: {\r\n\t\t\t\t\t\t\tname: province ? `${province} (${country})` : country,\r\n\t\t\t\t\t\t\tcountry,\r\n\t\t\t\t\t\t\tprovince,\r\n\t\t\t\t\t\t\tcurrent,\r\n\t\t\t\t\t\t\tpreviousDay,\r\n\t\t\t\t\t\t\tthreeDaysBefore,\r\n\t\t\t\t\t\t\tweekBefore,\r\n\t\t\t\t\t\t\tDaily: {\r\n\t\t\t\t\t\t\t\tabs: dailyChangeAbsolute,\r\n\t\t\t\t\t\t\t\trel: dailyChangeRelative\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tThreeDays: {\r\n\t\t\t\t\t\t\t\tabs: threeDaysChangeAbsolute,\r\n\t\t\t\t\t\t\t\trel: threeDaysChangeRelative\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tWeekly: {\r\n\t\t\t\t\t\t\t\tabs: weeklyChangeAbsolute,\r\n\t\t\t\t\t\t\t\trel: weeklyChangeRelative\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tcases: timeSerie\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tif (current > 99) {\r\n\t\t\t\t\t\tfinalData.push(record);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdispatch(add(finalData));\r\n\t\t\t} else {\r\n\t\t\t\tthrow Error(\"Data loading failed!\")\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n};\r\n\r\n// ============ helpers ===========\r\n\r\n// ============ actions ===========\r\n\r\n// ============ export ===========\r\n\r\nexport default {\r\n\tloadCsvData\r\n}","import {Action as CommonAction} from '@gisatcz/ptr-state';\r\n\r\nimport confirmedCases from './ConfirmedCases/actions';\r\n\r\nexport default {\r\n\t...CommonAction,\r\n\tspecific: {\r\n\t\tconfirmedCases\r\n\t}\r\n}","import {createSelector} from 'reselect';\r\nimport {commonSelectors, componentsSelectors} from '@gisatcz/ptr-state';\r\nimport _ from \"lodash\";\r\n\r\nconst getSubstate = state => state.specific.confirmedCases;\r\n\r\nconst getAll = commonSelectors.getAll(getSubstate);\r\n\r\nconst getAllSortedByComponent = createSelector(\r\n    [\r\n        getAll,\r\n        (state,componentKey) => componentsSelectors.getDataByComponentKey(state, componentKey)\r\n    ],\r\n    (allCases, componentState) => {\r\n        const sorting = componentState.sorting;\r\n        return _.orderBy(allCases, [sorting[0]], [sorting[1]]);\r\n    }\r\n);\r\n\r\nconst getAllSortedByCases = createSelector(\r\n    [\r\n        getAll\r\n    ],\r\n    (allCases) => {\r\n        return _.orderBy(allCases, ['data.current'], ['desc']);\r\n    }\r\n);\r\n\r\nconst getAllSortedByChange = createSelector(\r\n    [\r\n        getAll\r\n    ],\r\n    (allCases) => {\r\n        return _.orderBy(allCases, ['data.dailyChangeAbsolute'], ['desc']);\r\n    }\r\n);\r\n\r\nconst getFilteredDataByConfirmedCasesThreshold = createSelector(\r\n    [\r\n        getAll,\r\n        (state, threshold) => threshold,\r\n        (state, threshold, countries) => countries\r\n    ],\r\n    (data, threshold, countries) => {\r\n        if (data.length) {\r\n            let filteredCountries = _.filter(data, item => {\r\n                return _.includes(countries, item.key);\r\n            });\r\n\r\n            let appliedThreshold = null;\r\n            if (filteredCountries) {\r\n                appliedThreshold = filteredCountries.map(country => {\r\n                    let filteredCases = [];\r\n\r\n                    let index = 1;\r\n                    _.forEach(country.data.cases, (item) => {\r\n                        if (item.value >= threshold) {\r\n                            filteredCases.push({\r\n                                ...item, day: index\r\n                            });\r\n                            index++;\r\n                        }\r\n                    });\r\n\r\n                    return {\r\n                        ...country,\r\n                        data: {\r\n                            ...country.data,\r\n                            cases: filteredCases\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            return appliedThreshold;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n);\r\n\r\nexport default {\r\n    getAll,\r\n    getAllSortedByCases,\r\n    getAllSortedByChange,\r\n    getAllSortedByComponent,\r\n    getFilteredDataByConfirmedCasesThreshold\r\n};","import {Select as CommonSelect} from '@gisatcz/ptr-state';\r\n\r\nimport confirmedCases from \"./ConfirmedCases/selectors\";\r\n\r\nexport default {\r\n\t...CommonSelect,\r\n\tspecific: {\r\n\t\tconfirmedCases\r\n\t}\r\n}","import React from 'react';\r\nimport {LineChart} from \"@gisatcz/ptr-charts\";\r\nimport {HoverHandler} from \"@gisatcz/ptr-core\";\r\n\r\nclass ConfirmedCasesChart extends React.PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        if (this.props.data) {\r\n            return (\r\n                <HoverHandler>\r\n                    <LineChart\r\n                        key=\"time-scale-line\"\r\n\r\n                        data={this.props.data}\r\n                        keySourcePath=\"key\"\r\n                        nameSourcePath=\"data.name\"\r\n                        serieDataSourcePath=\"data.cases\"\r\n                        xSourcePath=\"day\"\r\n                        ySourcePath=\"value\"\r\n\r\n                        isSerie\r\n                        pointRadius={3}\r\n\r\n                        xValuesSize={1.8}\r\n                        xOptions={{\r\n                            name: \"Day\"\r\n                        }}\r\n\r\n                        yScaleType=\"logarithmic\"\r\n                        yValuesSize={3.8}\r\n                        yOptions={{\r\n                            name: \"Confirmed cases\",\r\n                            min: 100,\r\n                            max: 100000,\r\n                            unit: \"cases\"\r\n                        }}\r\n\r\n                        sorting={[[\"day\", \"asc\"]]}\r\n\r\n                        height={18}\r\n\r\n                        legend\r\n                        withPoints={true}\r\n                        pointOptions={{\r\n                            radius: 4,\r\n                            showOnHover: true\r\n                        }}\r\n                    />\r\n                </HoverHandler>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default ConfirmedCasesChart;","import {connect} from '@gisatcz/ptr-state';\r\nimport Select from '../../../state/Select';\r\nimport Action from \"../../../state/Action\";\r\nimport presentation from './presentation';\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        data: Select.specific.confirmedCases.getFilteredDataByConfirmedCasesThreshold(state, ownProps.threshold, ownProps.countries)\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(presentation);\r\n","import React from 'react';\r\nimport classnames from 'classnames';\r\nimport './style.scss';\r\n\r\nclass Card extends React.PureComponent {\r\n\r\n    render() {\r\n        const classes = classnames(\"crnvrs-card\", {\r\n            \"two-col\": this.props.col === 2\r\n        });\r\n\r\n        return (\r\n            <div className={classes}>\r\n                <div className=\"crnvrs-card-header\">\r\n                    <div className=\"crnvrs-card-title\">\r\n                        {this.props.title}\r\n                        <span>{this.props.subtitle ? (`(${this.props.subtitle})`) : null}</span>\r\n                    </div>\r\n                    {this.props.switch}\r\n                </div>\r\n                <div className=\"crnvrs-card-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;\r\n\r\nconst SwitchOption = (props) => {\r\n    const classes = classnames(\"crnvrs-card-switch-option\", {\r\n        \"active\": props.active,\r\n        \"disabled\": props.disabled\r\n    });\r\n\r\n    return (\r\n        <div className={classes} onClick={props.onClick}>{props.children}</div>\r\n    );\r\n};\r\n\r\nexport class Switch extends React.PureComponent {\r\n    onOptionClick(option) {\r\n        if (option !== this.props.activeOption) {\r\n            this.props.onChange(option);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"crnvrs-card-switch\">\r\n                {this.props.options && this.props.options.map(option => (\r\n                    <SwitchOption\r\n                        active={this.props.active === option}\r\n                        onClick={this.onOptionClick.bind(this, option)}\r\n                    >\r\n                        {option}\r\n                    </SwitchOption>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport _ from 'lodash';\r\nimport {Select} from '@gisatcz/ptr-atoms';\r\nimport ConfirmedCasesChart from \"./ConfirmedCasesChart\";\r\nimport Card from \"../Card\";\r\n\r\nconst thresholdOptions = [{\r\n    key: \"1\",\r\n    label: 1\r\n},{\r\n    key: \"20\",\r\n    label: 20\r\n},{\r\n    key: \"100\",\r\n    label: 100\r\n},{\r\n    key: \"500\",\r\n    label: 500\r\n},{\r\n    key: \"1000\",\r\n    label: 1000\r\n}];\r\n\r\nclass Confirmed extends React.PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n          selectedAreas: [\"Czechia\", \"Italy\", \"Norway\", \"US_New York\", \"Spain\", \"Korea, South\"],\r\n          threshold: thresholdOptions[2]\r\n        };\r\n\r\n        this.onAreaChange = this.onAreaChange.bind(this);\r\n        this.onThresholdChange = this.onThresholdChange.bind(this);\r\n    }\r\n\r\n    onAreaChange(selectedOptions) {\r\n        const keys = selectedOptions.map(option => option.key);\r\n        const sorted = _.sortBy(keys);\r\n\r\n        this.setState({\r\n           selectedAreas: sorted\r\n        });\r\n    }\r\n\r\n    onThresholdChange(threshold) {\r\n        this.setState({\r\n            threshold\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card\r\n                title=\"Confirmed cases progress\"\r\n                subtitle=\"from the day with at least 100 cases\"\r\n                col={2}\r\n            >\r\n                <Select\r\n                    value={this.state.selectedAreas}\r\n                    optionLabel=\"data.name\"\r\n                    optionValue=\"key\"\r\n                    options={this.props.allAreas}\r\n                    multi\r\n                    onChange={this.onAreaChange}\r\n                    clearable={false}\r\n                />\r\n                <ConfirmedCasesChart\r\n                    threshold={this.state.threshold.label}\r\n                    countries={this.state.selectedAreas}\r\n                />\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Confirmed;","import {connect} from '@gisatcz/ptr-state';\r\nimport Select from '../../state/Select';\r\nimport Action from \"../../state/Action\";\r\nimport presentation from './presentation';\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        allAreas: Select.specific.confirmedCases.getAllSortedByCases(state)\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(presentation);\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport Card, {Switch} from \"../Card\";\r\n\r\nclass ConfirmedChange extends React.PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onContentChange = this.onContentChange.bind(this);\r\n    }\r\n\r\n    onContentChange() {\r\n        // TODO\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card\r\n                title=\"Total confirmed cases\"\r\n            >\r\n                <table className=\"crnvrs-table\">\r\n                    <tr>\r\n                        <th>Country/province</th>\r\n                        <th className=\"crnvrs-table-column-right\">Cases</th>\r\n                    </tr>\r\n                    {this.props.allAreas.map((area, i) =>\r\n                        <tr>\r\n                            <td>{i+1}. {area.data.name}</td>\r\n                            <td className=\"crnvrs-table-column-right\">{area.data.current && area.data.current.toLocaleString()}</td>\r\n                        </tr>\r\n                    )}\r\n                </table>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmedChange;","import {connect} from '@gisatcz/ptr-state';\r\nimport Select from '../../state/Select';\r\nimport Action from \"../../state/Action\";\r\nimport presentation from './presentation';\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        allAreas: Select.specific.confirmedCases.getAllSortedByCases(state)\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(presentation);\r\n","import React from 'react';\r\nimport classnames from 'classnames';\r\nimport _ from 'lodash';\r\nimport Card, {Switch} from \"../Card\";\r\n\r\nclass ConfirmedTotal extends React.PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onContentChange = this.onContentChange.bind(this);\r\n    }\r\n\r\n    onContentChange(activeContentOption) {\r\n        this.props.setActiveContentOption(activeContentOption);\r\n        this.onOrderChange(activeContentOption);\r\n    }\r\n\r\n    onOrderChange(content, column, order) {\r\n        const values = this.props.sorting[0].split(\".\");\r\n        const ordering = this.props.sorting[1];\r\n        const contentString = content || values[1];\r\n        const columnString = column || values[2];\r\n        const orderString = ordering || order;\r\n\r\n        this.props.setSorting([`data.${contentString}.${columnString}`, orderString]);\r\n    }\r\n\r\n    render() {\r\n        const values = this.props.sorting[0].split(\".\");\r\n        const activeColumn = values[2];\r\n\r\n        const absClass = classnames(\"crnvrs-table-column-right sortable\", {\r\n            active: activeColumn === \"abs\"\r\n        });\r\n\r\n        const relClass = classnames(\"crnvrs-table-column-right sortable\", {\r\n            active: activeColumn === \"rel\"\r\n        });\r\n\r\n        return (\r\n            <Card\r\n                title=\"Change\"\r\n                switch={\r\n                    <Switch\r\n                        onChange={this.onContentChange}\r\n                        options={this.props.contentOptions}\r\n                        active={this.props.activeContentOption}\r\n                    />\r\n                }\r\n            >\r\n                <table className=\"crnvrs-table\">\r\n                    <tr>\r\n                        <th>Country/province</th>\r\n                        <th onClick={this.onOrderChange.bind(this, null, 'abs', null)} className={absClass}>Abs</th>\r\n                        <th onClick={this.onOrderChange.bind(this, null, 'rel', null)} className={relClass}>%</th>\r\n                    </tr>\r\n                    {this.props.allSortedByComponent.map((area, i) => {\r\n                        let absChangeValue = area.data[this.props.activeContentOption].abs;\r\n                        let relChangeValue = area.data[this.props.activeContentOption].rel;\r\n\r\n                        const relClasses = classnames(\"crnvrs-table-column-right\", {\r\n                            red: relChangeValue > 0\r\n                        });\r\n\r\n                        return (\r\n                            <tr>\r\n                                <td>{i+1}. {area.data.name}</td>\r\n                                <td className=\"crnvrs-table-column-right\">{absChangeValue && absChangeValue.toLocaleString()}</td>\r\n                                <td className={relClasses}>{relChangeValue && relChangeValue.toLocaleString(undefined, {minimumFractionDigits: 1, maximumFractionDigits: 1})}</td>\r\n                            </tr>\r\n                        );\r\n                    }\r\n                    )}\r\n                </table>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmedTotal;","import {connect} from '@gisatcz/ptr-state';\r\nimport Select from '../../state/Select';\r\nimport Action from \"../../state/Action\";\r\nimport presentation from './presentation';\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        allSortedByComponent: Select.specific.confirmedCases.getAllSortedByComponent(state, ownProps.componentKey),\r\n        contentOptions: Select.components.get(state, ownProps.componentKey, \"contentOptions\"),\r\n        activeContentOption: Select.components.get(state, ownProps.componentKey, \"activeContentOption\"),\r\n        sorting: Select.components.get(state, ownProps.componentKey, \"sorting\")\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        setActiveContentOption: (activeContentOption) => {\r\n            dispatch(Action.components.set(ownProps.componentKey, \"activeContentOption\", activeContentOption))\r\n        },\r\n        setSorting: (sorting) => {\r\n            dispatch(Action.components.set(ownProps.componentKey, \"sorting\", sorting));\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(presentation);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from '@gisatcz/ptr-state';\r\nimport createStore, {createHistory} from \"./state/Store\";\r\n\r\n// base styles need to be imported before all components\r\nimport '@gisatcz/ptr-core/lib/styles/reset.css';\r\nimport '@gisatcz/ptr-core/lib/styles/base.scss';\r\nimport './styles/index.scss';\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport Action from \"./state/Action\";\r\nimport Confirmed from \"./components/Confirmed\";\r\nimport ConfirmedTotal from \"./components/ConfirmedTotal\";\r\nimport ConfirmedChange from \"./components/ConfirmedChange\";\r\n\r\nconst path = process.env.PUBLIC_URL;\r\nconst history = createHistory({basename: path});\r\nconst Store = createStore(history);\r\n\r\nStore.dispatch(Action.specific.confirmedCases.loadCsvData());\r\n\r\nStore.dispatch(Action.components.update(\"ConfirmedChangeTable\", {\r\n    contentOptions: [\"Daily\", \"Weekly\"],\r\n    activeContentOption: \"Daily\",\r\n    sorting: [\"data.Daily.abs\", \"desc\"]\r\n}));\r\n\r\nReactDOM.render(\r\n    <>\r\n        <Provider store={Store}>\r\n            <div className=\"ptr-light\">\r\n                <div className=\"crnvrs-card-row\">\r\n                    <Confirmed/>\r\n                    <div className=\"crnvrs-card-group\">\r\n                        <ConfirmedTotal/>\r\n                        <ConfirmedChange\r\n                            componentKey=\"ConfirmedChangeTable\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Provider>\r\n    </>, document.getElementById('ptr')\r\n);\r\n\r\nserviceWorker.unregister();","import {\r\n\tcreateStore,\r\n\tcombineReducers,\r\n\tapplyMiddleware,\r\n\tcompose,\r\n\tthunk,\r\n\tlogger,\r\n\treduxBatch,\r\n\tcomponentsReducers\r\n} from '@gisatcz/ptr-state';\r\nimport { connectRouter, routerMiddleware } from '@gisatcz/ptr-state';\r\nimport { createBrowserHistory } from 'history';\r\nimport { wrapHistory } from \"oaf-react-router\";\r\n\r\n// base types\r\nimport {appReducers} from '@gisatcz/ptr-state';\r\n\r\n// specific\r\nimport confirmedCases from './ConfirmedCases/reducers'\r\n\r\nexport const createHistory = (options) => {\r\n\tlet history = createBrowserHistory(options);\r\n\tconst settings = {\r\n\t\tprimaryFocusTarget: \"body\",\r\n\t\tsmoothScroll: true\r\n\t};\r\n\twrapHistory(history, settings);\r\n\treturn history;\r\n};\r\n\r\n// Redux store creator\r\nexport default history => {\r\n\r\n\tlet middleware = applyMiddleware(thunk, routerMiddleware(history));\r\n\tif (process.env.NODE_ENV === 'development') {\r\n\t\tmiddleware = applyMiddleware(thunk, logger, routerMiddleware(history));\r\n\t}\r\n\treturn createStore(combineReducers({\r\n\t\tspecific: combineReducers({\r\n\t\t\tconfirmedCases\r\n\t\t}),\r\n\t\tapp: appReducers,\r\n\t\tcomponents: componentsReducers,\r\n\t\trouter: connectRouter(history)\r\n\t}), compose(reduxBatch, middleware, reduxBatch, applyMiddleware(thunk), reduxBatch));\r\n}"],"sourceRoot":""}